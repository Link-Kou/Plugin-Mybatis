package com.plugin.javawidget.driven.resolvers;


import com.plugin.configproperty.Config;
import com.plugin.configproperty.ConfigValue;
import com.plugin.javawidget.basemodel.BaseParam;
import com.plugin.javawidget.paging.Paginator;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.plugin.json.Json;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 自定义参数解析
 * JOSN格式的Requestbody转换为Model
 *
 * @author LK
 * @version 1.0
 * @data 2017-12-08 21:45
 */
public class JsonResolverImpl implements HandlerMethodArgumentResolver {

    @ConfigValue(@Value("${Globalparam.SYS_AUTH_DEV_NAME}"))
    private Config<String> SYS_AUTH_DEV_NAME;

    @ConfigValue(@Value("${Globalparam.SYS_AUTH_DEV_INTERCEPTOR}"))
    private Config<Boolean> SYS_AUTH_DEV_INTERCEPTOR;

    private class json extends Json {
        @Override
        protected <T> T fromJson(String json, Type type) {
            return super.fromJson(json, type);
        }

        @Override
        protected <T> T fromJson(JsonElement json, Type type) {
            return super.fromJson(json, type);
        }
    }

    private List<String> HttpMethod = Arrays.asList("POST");

    @Override
    public boolean supportsParameter(MethodParameter methodParameter) {
        //返回设置注解
        return methodParameter.hasParameterAnnotation(JsonResolver.class);
    }

    @Override
    public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {

        //转换的类型
        Class c = methodParameter.getParameterType();
        //支持分页
        if (!c.equals(Paginator.class)) {
            if (!BaseParam.class.isAssignableFrom(c)) {
                throw new IllegalArgumentException("对象未继承BaseParam");
            }
        }
        try {
            //HttpMethod.stream().filter(x->x.equals(((ServletWebRequest) nativeWebRequest).getHttpMethod().name())).collect(Collectors.toList());
            final String methodname = ((ServletWebRequest) nativeWebRequest).getHttpMethod().name();
            boolean inHttpMethod = false;
            for (String httpMethod : HttpMethod) {
                if (httpMethod.equals(methodname)) {
                    inHttpMethod = true;
                }
            }
            if (!inHttpMethod) {
                throw new IllegalArgumentException("注解不支持" + methodname + "请求类型");
            }
            HttpServletRequest httpServletRequest = ((ServletWebRequest) nativeWebRequest).getRequest();
            InputStream d = httpServletRequest.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            int i = -1;
            while ((i = d.read()) != -1) {
                baos.write(i);
            }
            String data = new String(baos.toByteArray(), StandardCharsets.UTF_8);

            /*
             * TMS数据格式要求
             * {
             *     page:
             *     itemsPerPage:
             *     ......:
             * }
             */
            BaseParam baseParam2 = null;
            Paginator<BaseParam> paginator = null;
            if (c.equals(Paginator.class)) {
                //泛型对象
                Type[] typeT = ((ParameterizedType) methodParameter.getGenericParameterType()).getActualTypeArguments();
                baseParam2 = compatiblePaginator(data, typeT);
                paginator = new json().fromJson(data, methodParameter.getGenericParameterType());
                paginator.setData(baseParam2);
            } else {
                baseParam2 = new json().fromJson(data, methodParameter.getGenericParameterType());
            }

            /*
             * 通过下面的类型进行参数输入解析
             */
            //#region 开发者信息加入参数内
            if (SYS_AUTH_DEV_INTERCEPTOR.get()) {
                //配合拦截器实现开发对接者信息解析
                BaseParam baseParam = (BaseParam) httpServletRequest.getAttribute(SYS_AUTH_DEV_NAME.get());
                baseParam2.setSystem(baseParam.getSystem())
                        .setBusiness(baseParam.getBusiness())
                        .setCustom(baseParam.getCustom())
                        .setPlatform(baseParam.getPlatform())
                        .setDevTokenId(baseParam.getDevTokenId());
            } else {
                baseParam2.setDevTokenId("0")
                        .setSystem(0)
                        .setBusiness(0)
                        .setCustom("")
                        .setPlatform(0);
            }
            if (c.equals(Paginator.class)) {
                return paginator;
            } else {
                return baseParam2;
            }
            //#endregion
        } catch (Exception e) {
            throw new IllegalArgumentException("输入的参数无法转换或输入的值为空");
        }
    }

    /**
     * 分页解析支持
     * {
     * page:
     * itemsPerPage:
     * data:
     * ......:
     * }
     *
     * @param data
     * @param typeT
     * @return
     */
    private BaseParam compatiblePaginator(String data, Type[] typeT) {
        JsonParser parser = new JsonParser();
        JsonObject object = parser.parse(data).getAsJsonObject();
        if (object.has("data")) {
            return new json().fromJson(object.get("data"), typeT[0]);
        } else {
            return new json().fromJson(data, typeT[0]);
        }
    }


    public JsonResolverImpl setHttpMethod(List<String> HttpMethod) {
        this.HttpMethod = HttpMethod;
        return this;
    }

    public List<String> getHttpMethod() {
        return this.HttpMethod;
    }


}
